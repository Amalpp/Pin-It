
"use strict";
(() => {

  const
    os = require('os'),
    fs = require('fs'),
    path = require('path'),
    rmdir = require('rmdir'),
    zlib = require('zlib'),
    tar = require('tar-fs'),
    process = require('process'),
    request = require('request'),
    ProgressBar = require('progress'),
    child_process = require('child_process'),
    
    major_version = 8,
    update_number = 131,
    build_number = 11,
    hash = 'd54c1d3a095b4ff2b6607d096fa80163',
    version = major_version + 'u' + update_number,

    jreDir = exports.jreDir = () => path.join(__dirname, 'jre'),

    fail = reason => {
      console.error(reason)
      process.exit(1)
    }

  let _arch = os.arch()

  switch (_arch){
    case 'x64': break
    case 'ia32': _arch = 'i586'; break
    default:
      fail('unsupported architecture: ' + _arch)
  }

  let
    arch = exports.arch = () => _arch,
    _platform = os.platform(),
    _driver
  
  switch (_platform){
    case 'darwin':
      _platform = 'macosx';
      _driver = ['Contents', 'Home', 'bin', 'java'];
      break
    case 'win32':
      _platform = 'windows';
      _driver = ['bin', 'javaw.exe'];
      break
    case 'linux':
      _driver = ['bin', 'java'];
      break
    default:
      fail('unsupported platform: ' + _platform)
  }
  
  const platform = exports.platform = () => _platform

  const getDirectories = dirPath => fs.readdirSync(dirPath).filter(
    file => fs.statSync(path.join(dirPath, file)).isDirectory()
  )

  const driver = exports.driver = () => {
    let jreDirs = getDirectories(jreDir())
    if (jreDirs.length < 1)
      fail('no jre found in archive')
    let d = _driver.slice()
    d.unshift(jreDirs[0])
    d.unshift(jreDir())
    return path.join.apply(path, d)
  }

  const getArgs = exports.getArgs = (classpath, classname, args) => {
    args = (args || []).slice()
    classpath = classpath || []
    args.unshift(classname)
    args.unshift(classpath.join(platform() === 'windows' ? ';' : ':'))
    args.unshift('-cp')
    return args
  }

  const spawn = exports.spawn =
    (classpath, classname, args, options) =>
      child_process.spawn(driver(), getArgs(classpath, classname, args), options)

  const spawnSync = exports.spawnSync =
    (classpath, classname, args, options) =>
      child_process.spawnSync(driver(), getArgs(classpath, classname, args), options)

  const url = exports.url = () =>
    'https://download.oracle.com/otn-pub/java/jdk/' +
    version + '-b' + build_number + '/' + hash + 
    '/jre-' + version + '-' + platform() + '-' + arch() + '.tar.gz'

  const install = exports.install = callback => {
    let urlStr = url()
    console.log("Downloading from: ", urlStr)
    callback = callback || (() => {})
    rmdir(jreDir())
    request.get({
      url: url(),
      rejectUnauthorized: false,
      agent: false,
      headers: {
        connection: 'keep-alive',
        'Cookie': 'gpw_e24=http://www.oracle.com/; oraclelicense=accept-securebackup-cookie'
      }
    }).on('response', res => {
      let len = parseInt(res.headers['content-length'], 10)
      let bar = new ProgressBar('  downloading and preparing JRE [:bar] :percent :etas', {
        complete: '=',
        incomplete: ' ',
        width: 80,
        total: len
      })
      res.on('data', chunk => bar.tick(chunk.length))
    })
    .on('error', err => {
      console.log(`problem with request: ${err.message}`)
      callback(err)
    })
    .pipe(zlib.createUnzip())
    .pipe(tar.extract(jreDir()))
  }

})()
